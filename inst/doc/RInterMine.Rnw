%\VignetteIndexEntry{User manual}
\documentclass[11pt]{article}
%\SweaveOpts{echo=T,pdf=T,eps=F,eval=T,keep.source=T}
\usepackage{Sweave}
%\usepackage{mathpazo}
\usepackage{hyperref,url}
\usepackage[a4paper]{geometry}


\begin{document}
\SweaveOpts{concordance=FALSE}


\title{RInterMine Tutorial}
\author{InterMine Team}

\date{\today}
\maketitle

%% Change code layout font and spacing
\DefineVerbatimEnvironment{Sinput}{Verbatim} {xleftmargin=2em}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{xleftmargin=2em}
\DefineVerbatimEnvironment{Scode}{Verbatim}{xleftmargin=2em}
\fvset{listparameters={\setlength{\topsep}{0pt}}}
\renewenvironment{Schunk}{\vspace{\topsep}}{\vspace{\topsep}}

%%  Remove continuation prompts
<<echo=false>>=
options(continue="  ")
@ 
\section{Introduction}
InterMine is a powerful open source data warehouse system integrating diverse biological data sets (e.g., genomic, expression and protein data) for various organisms.  Integrating data makes it possible to run sophisticated data mining queries that span domains of biological knowledge.  A list of databases powered by InterMine is shown in Table \ref{tbl:mine}.
\begin{table}[htbp]
\caption{Biological databases powered by Intermine}
\begin{center}
\begin{tabular}[t]{|l| l | p{10cm} |}
\hline
\multicolumn{1}{|c|}{\textbf{Database}} & \multicolumn{1}{c|}{\textbf{Organism}} & \multicolumn{1}{c|}{\textbf{Data}} \\ \hline
FlyMine & \parbox{3cm}{Drosophila\\A. gambiae} & Genes, homology, proteins, interactions, gene ontology, expression, regulation, phenotypes, pathways, diseases, resources, publications \\ \hline
modMine & \parbox{3cm}{C.elegans,\\D.melanogaster} & mRNA, histone modification, non-TF chromatin binding factor, transcriptional factor, small RNA, chromatin structure \\ \hline
RatMine & \parbox{3cm}{R.norvegicus,\\H.sapiens,\\M.musculus} & Disease, gene ontology, genomics, interactions, phenotype, pathway, proteins, publication,, QTL, SNP \\ \hline
YeastMine & S.cerevisiae & Genomics, proteins, gene ontology, comparative genomics, phenotypes, interactions, literature, pathways, gene expression \\ \hline
MetabolicMine & \parbox{3cm}{H.sapiens,\\M.musculus} & Genomics, SNPs, GWAS, proteins, gene ontoloyg, pathways, gene expression, interactions, publications, disease, orthologues, alleles \\ \hline
TargetMine & \parbox{3cm}{H. sapiens,\\M. musculus,\\R. norvegicus,\\Drosophila} & Genomics, proteins, gene ontology, pathways, interactions, disease, compounds, enzymes \\ \hline
\end{tabular}
\end{center}
\label{tbl:mine}
\end{table}

InterMine includes an attractive, user-friendly web interface that works 'out of the box' and a powerful, scriptable web-service API to allow programmatic access to your data.  This R package provides interface with the InterMine-powered databases through webservices.  It makes most from the correspondence of the data frame and list objects in R and the table object in databases while hiding the details of data exchange through XML or JSON..

<<echo=FALSE>>=
options(width=108)
@
\section{Jumpstart: How to build queries using RInterMine}
Let us start from a basic task - find the location of gene ABO.
\subsection{Select a database}
At the beginning, we look at what databases are available.
\begin{scriptsize}
<<>>=
library(RInterMine)
listMines()
@
\end{scriptsize}
Since we would like to query human genes, MetabolicMine is the choice.
\begin{scriptsize}
<<>>=
im <- initInterMine(mine=listMines()["MetabolicMine"])
im
@
\end{scriptsize}
\subsection{Obtain a pre-built query}
The easiest way to builld a query is to start from a template.  A template contain a pre-built query with fixed set of output columns, and one or more constraint.
\begin{scriptsize}
<<>>=
template <- getTemplates(im)
head(template)
@
\end{scriptsize}
We would like to find templates involving genes.
\begin{scriptsize}
<<>>=
template[grep("gene", template$name, ignore.case=T),]
@
\end{scriptsize}
The template Gene\_Location seems to be what we are looking for.  We look further into the details of this template. 
\begin{scriptsize}
<<>>=
queryGeneLoc <- getTemplateQuery(im, "Gene_Location")
queryGeneLoc
@
\end{scriptsize}
There are three essential memebers in a query - view and constraints and constraintLogic.
\begin{itemize}
\item view.  The view represents the output columns in the query output.  Columns of a view are usually of the form ``A.B'', where B is the child of A.  For example in the column Gene.symbol, symbol is the child of Gene.  Columns could also be in cascade form ``A.B.C''.  For example, in the column Gene.locations.start, locations is the child of Gene and start is the child of locations.
\item constraints.  Query constraints are a matrix containing the following columns: path (in the same format as view columns), op (the constraint operator, one of '=', '!=', 'LOOKUP', 'ONE OF', 'NONE OF', '>', '<', '>=', '<=', 'LIKE'), value (the constraint value),  code (the name of the constraint), extraValue (optional, required for LOOKUP constraints).  
\item constraintLogic.  A constraintLogic, if not explicitly given, is "AND" operation, e.g., "A and B", where A and B are the codes in the constraints. 
\end{itemize}

\noindent\emph{Question:}   how to derive the column name of of a query view or the path name in a query constraint?

\noindent\emph{Answer.}
We start by looking at the InterMine model.
\begin{scriptsize}
<<>>=
model <- getModel(im)
head(model)
@
\end{scriptsize}
We could take a look at the children of the Gene data type.
\begin{scriptsize}
<<>>=
model[which(model$type=="Gene"),]
@
\end{scriptsize}
Gene has a child called symbol (hence the column Gene.symbol).  At the same time, Gene also has a child called locations, which is of the Location data type.
\begin{scriptsize}
<<>>=
model[which(model$type=="Location"),]
@
\end{scriptsize}
Location has a child called start (hence the column Gene.location.start).
\subsection{Run a query}
Let us first run the query from the template without any modification.
\begin{scriptsize}
<<>>=
resGeneLoc <- runQuery(im, queryGeneLoc)
resGeneLoc
@
\end{scriptsize}

\subsection{Modify a query}
We would first modify the constraints of the query to find the location of the gene ABO.
\begin{scriptsize}
<<>>=
queryGeneLoc$constraints[1, "value"]="ABO"
queryGeneLoc$constraints
resGeneLoc <- runQuery(im, queryGeneLoc)
resGeneLoc
@
\end{scriptsize}
There are two rows in the output - one corresponding to human and the the mouse.  We would like to identify explicitly which one is corresponding to human, i.e., we would like to add a field identifying the organism to the view.
We could see Gene has a child organism, which is of the Organism data type.
\begin{scriptsize}
<<>>=
model[which(model$type=="Organism"),]
@
\end{scriptsize}
Organism has a child called name.  We could then add Gene.organism.name to the view.
\begin{scriptsize}
<<>>=
queryGeneLoc$view <- c(queryGeneLoc$view, "Gene.organism.name")
queryGeneLoc$view
resGeneLoc <- runQuery(im, queryGeneLoc)
resGeneLoc
@
\end{scriptsize}
Now we would like to restrict to only output the human gene.  We need to change the constraint of the query.
\begin{scriptsize}
<<>>=
newConstraint <- c("Gene.organism.name", "=", "Homo sapiens", "B", "")
queryGeneLoc$constraints <- rbind(queryGeneLoc$constraints, newConstraint)
queryGeneLoc$constraints
resGeneLoc <- runQuery(im, queryGeneLoc)
resGeneLoc
@
\end{scriptsize}
The constraintLogic, if not given, is ``A and B''.  We would now try to explicitly specify the constraintLogic.
\begin{scriptsize}
<<>>=
queryGeneLoc$constraintLogic <- "A and B"
queryGeneLoc$constraintLogic
resGeneLoc <- runQuery(im, queryGeneLoc)
resGeneLoc
@
\end{scriptsize}

\section{Recipes}
\subsection{Obtain the DNA sequence of gene ABO}
\begin{itemize}
\item Start with the jumpstart example
\begin{scriptsize}
<<>>=
queryGeneSeq <- getTemplateQuery(im, "Gene_Location")
queryGeneSeq$constraints[1, "value"]="ABO"
newConstraint <- c("Gene.organism.name", "=", "Homo sapiens", "B", "")
queryGeneSeq$constraints <- rbind(queryGeneSeq$constraints, newConstraint)
@
\end{scriptsize}
\item Change the view to contain only one element
\begin{scriptsize}
<<>>=
queryGeneSeq$view <- c("Gene.symbol")
@
\end{scriptsize}
\item Run the query
\begin{scriptsize}
<<>>=
resGeneSeq <- runQuery(im, queryGeneSeq, format="sequence")
resGeneSeq
@
\end{scriptsize}
\end{itemize}
\subsection{Find and plot the genes within 50000 base pairs of gene ABO}
\begin{itemize}
\item Start with the jumpstarta example
\begin{scriptsize}
<<>>=
queryGeneLoc <- getTemplateQuery(im, "Gene_Location")
queryGeneLoc$constraints[1, "value"]="ABO"
newConstraint <- c("Gene.organism.name", "=", "Homo sapiens", "B", "")
queryGeneLoc$constraints <- rbind(queryGeneLoc$constraints, newConstraint)
resGeneLoc <- runQuery(im, queryGeneLoc)
@
\end{scriptsize}
\item Define a new query
\begin{scriptsize}
<<>>=
queryNeighborGene <- newQuery()
@
\end{scriptsize}
\item Define the view
\begin{scriptsize}
<<>>=
queryNeighborGene$view <- c("Gene.primaryIdentifier", "Gene.symbol", "Gene.chromosome.primaryIdentifier", 
                            "Gene.locations.start", "Gene.locations.end", "Gene.locations.strand")
queryNeighborGene$view
@
\end{scriptsize}
\item Define the constraints
\begin{scriptsize}
<<>>=
newConstraint1 <- c("Gene.chromosome.primaryIdentifier", "=", 
                    resGeneLoc[1, "Gene.chromosome.primaryIdentifier"], "A", "")
newConstraint2 <- c("Gene.locations.start", ">=", 
                    as.numeric(resGeneLoc[1, "Gene.locations.start"])-50000, "B", "")
newConstraint3 <- c("Gene.locations.end", "<=", 
                    as.numeric(resGeneLoc[1, "Gene.locations.end"])+50000, "C", "")
newConstraint4 <- c("Gene.organism.name", "=", "Homo sapiens", "D", "")
queryNeighborGene$constraints <- rbind(queryNeighborGene$constraints, 
                                       newConstraint1, newConstraint2, newConstraint3, newConstraint4)
queryNeighborGene$constraints
@
\end{scriptsize}
\item Define the sort order
\begin{scriptsize}
<<>>=
queryNeighborGene$sortOrder <- "Gene.locations.start asc"
queryNeighborGene$sortOrder
@
\end{scriptsize}
\item Run the query
\begin{scriptsize}
<<>>=
resNeighborGene <- runQuery(im, queryNeighborGene)
resNeighborGene
@
\end{scriptsize}
\item Plot the genes
\begin{scriptsize}
<<X>>=
resNeighborGene$Gene.locations.strand[which(resNeighborGene$Gene.locations.strand==1)]="+"
resNeighborGene$Gene.locations.strand[which(resNeighborGene$Gene.locations.strand==-1)]="-"
gene.idx <- which(nchar(resNeighborGene$Gene.symbol)==0)
resNeighborGene$Gene.symbol[gene.idx]=resNeighborGene$Gene.primaryIdentifier[gene.idx]
#resNeighborGene
require(Gviz)
annTrack <- AnnotationTrack(start=resNeighborGene$Gene.locations.start, 
                            end=resNeighborGene$Gene.locations.end, 
                            strand=resNeighborGene$Gene.locations.strand, 
                            chromosome=resNeighborGene$Gene.chromosome.primaryIdentifier[1],
                            genome="hg19", name="around ABO",id=resNeighborGene$Gene.symbol)
#annTrack
@
\end{scriptsize}
\begin{center}
<<fig=TRUE>>=
plotTracks(annTrack, shape="box", showFeatureId=T, fontcolor="black")
@
\end{center}
\end{itemize}
\subsection{Obtain the gene ontology (GO) terms associated with gene ABO}
\begin{itemize}
\item Start with the template Gene\_GO
\begin{scriptsize}
<<>>=
queryGeneGO <- getTemplateQuery(im, "Gene_GO")
queryGeneGO
@
\end{scriptsize}
\item Modify the view to display a compact view
\begin{scriptsize}
<<>>=
queryGeneGO$view <- queryGeneGO$view[2:5]
queryGeneGO$view
@
\end{scriptsize}
\item Modify the constraints to look for gene ABO.
\begin{scriptsize}
<<>>=
queryGeneGO$constraints[1, "value"]="ABO"
queryGeneGO$constraints
@
\end{scriptsize}
\item Run the query
\begin{scriptsize}
<<>>=
resGeneGO <- runQuery(im, queryGeneGO)
resGeneGO
@
\end{scriptsize}
\end{itemize}

\subsection{Obtain the genes associated with gene ontology (GO) term "metal ion binding"}
\begin{itemize}
\item Start with the template Gene\_GO
\begin{scriptsize}
<<>>=
queryGOGene <- getTemplateQuery(im, "GOterm_Gene")
queryGOGene
@
\end{scriptsize}
\item Modify the view to display a compact view
\begin{scriptsize}
<<>>=
queryGOGene$view <- queryGOGene$view[2:5]
queryGOGene$view
@
\end{scriptsize}
\item Modify the constraints to look for GO term "metal ion binding".
\begin{scriptsize}
<<>>=
queryGOGene$constraints[1, "value"]="metal ion binding"
queryGOGene$constraints
@
\end{scriptsize}
\item Run the query
\begin{scriptsize}
<<>>=
resGOGene <- runQuery(im, queryGOGene)
head(resGOGene)
@
\end{scriptsize}
\end{itemize}
%\begin{center}
%<<fig=TRUE>>=
%plot(NA, xlim=c(-r,r), ylim=c(-r,r), asp=1, bty='n',
%     xaxt='n', yaxt='n', xlab='', ylab='')
%@ 
%\end{center}

\section{Session Info}
\begin{scriptsize}
<<>>=
sessionInfo()
warnings()
@
\end{scriptsize}

\newpage
\appendix
\section{Visual way to derive the column name of a query view or the path name in a query constraint from the database webpage}
The InterMine model could be accessed from the mine homepage by clicking the tab "QueryBuilder" and selecting the appropriate data type under "Select a Data Type to Begin a Query", as shown in Figure \ref{fig:query_builder}.\\
\begin{figure}[h!]
\caption{Query Builder}
\centering
\includegraphics[width=12cm]{querybuilder.jpg}
\label{fig:query_builder}
\end{figure}

Here we select Gene as the data type.  From Figure \ref{fig:model},  it is straightforward to see where the view columns come from.\\
\begin{figure}[h!]
\caption{Gene Model}
\centering
\includegraphics[height=7.5cm]{model.jpg}
\label{fig:model}
\end{figure}

We could select Symbol and Chromosome->Primary Identifier by clicking Show on the right of them.  Then click "Export XML" at the bottom right corner of the webpage, as shown in Figure \ref{fig:export_xml}.
\begin{figure}[h!]
\caption{Export XML}
\centering
\includegraphics[width=16cm]{export_xml.jpg}
\label{fig:export_xml}
\end{figure}

The column names Gene.symbol and Gene.chromosome.primaryIdentifier are contained in the XML output, as shown in Figure \ref{fig:view_column}.
\begin{figure}[h!]
\caption{Columns of a query view}
\centering
\includegraphics[width=16cm]{view_column.jpg}
\label{fig:view_column}
\end{figure}

\end{document}